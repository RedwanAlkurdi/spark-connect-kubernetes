name: Check Release

on:
  release:
    types: [ published, created ]


concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  SEMVER_PATTERN: '^v([0-9]+)\.([0-9]+)\.([0-9]+)(-rc\.([0-9]+))?$'
  HELM_REGISTRY: ghcr.io
  HELM_REPOSITORY: ${{ github.repository_owner }}/helm-charts

jobs:
  check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check whether version matches semver pattern
        run: |
          VERSION=$(cat VERSION)
          if [[ ${VERSION} =~ ${{ env.SEMVER_PATTERN }} ]]; then
            echo "Version '${VERSION}' matches semver pattern."
          else
            echo "Version '${VERSION}' does not match semver pattern."
            exit 1
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Check whether chart version and appVersion matches version
        run: |
          VERSION=${VERSION#v}
          CHART_VERSION=$(cat charts/spark-connect/Chart.yaml | grep version | awk '{print $2}')
          CHART_APP_VERSION=$(cat charts/spark-connect/Chart.yaml | grep appVersion | awk '{print $2}')
          if [[ ${CHART_VERSION} == ${VERSION} ]]; then
            echo "Chart version '${CHART_VERSION}' matches version '${VERSION}'."
          else
            echo "Chart version '${CHART_VERSION}' does not match version '${VERSION}'."
            exit 1
          fi
          if [[ ${CHART_APP_VERSION} == ${VERSION} ]]; then
            echo "Chart appVersion '${CHART_APP_VERSION}' matches version '${VERSION}'."
          else
            echo "Chart appVersion '${CHART_APP_VERSION}' does not match version '${VERSION}'."
            exit 1
          fi

      - name: Check if tag exists
        run: |
          git fetch --tags
          if git tag -l | grep -q "^${VERSION}$"; then
            echo "Tag '${VERSION}' already exists."
            exit 1
          else
            echo "Tag '${VERSION}' does not exist."
          fi
          

  release_helm_charts:
    permissions:
      contents: write
      packages: write

    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0
        with:
          version: v3.14.4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.HELM_REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Read version from VERSION file
        run: |
          VERSION=$(cat VERSION)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Package Helm charts
        run: |
          for chart in $(ls charts); do
            helm package charts/${chart}
          done

      - name: Upload charts to GHCR
        run: |
          for pkg in $(ls *.tgz); do
            helm push ${pkg} oci://${{ env.HELM_REGISTRY }}/${{ env.HELM_REPOSITORY }}
          done

      - name: Save packaged charts to temp directory
        run: |
          mkdir -p /tmp/charts
          cp *.tgz /tmp/charts

      - name: Checkout to branch gh-pages
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          fetch-depth: 0

      - name: Copy packaged charts
        run: |
          cp /tmp/charts/*.tgz .

      - name: Update Helm charts repo index
        env:
          CHART_URL: https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}
        run: |
          helm repo index --merge index.yaml --url ${CHART_URL} .
          git add index.yaml
          git commit -s -m "Add index for Spark connect chart ${VERSION}" || exit 0
          git push
      

      - name: Release
        id: release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: "Spark connect ${{ env.VERSION }}"
          tag_name: ${{ github.tag_name }}
          prerelease: ${{ contains(env.VERSION, 'rc') }}
          target_commitish: ${{ github.sha }}
          files: |
            *.tgz